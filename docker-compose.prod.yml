version: '3.8'

# Production Docker Compose configuration for KSET Trading Library
# Optimized for Korean financial services with high availability and security

services:
  # Main KSET Application
  kset-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        - NODE_ENV=production
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - VERSION=${VERSION:-1.0.0}
        - VCS_REF=${VCS_REF:-unknown}
    image: kset:${VERSION:-latest}
    container_name: kset-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - WS_PORT=9000
      - METRICS_PORT=9090
      - TZ=Asia/Seoul
      # Database Configuration
      - DB_HOST=kset-db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-kset_prod}
      - DB_USER=${DB_USER:-kset}
      - DB_PASSWORD=${DB_PASSWORD}
      # Redis Configuration
      - REDIS_HOST=kset-redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      # Security Configuration
      - KIWOOM_API_KEY=${KIWOOM_API_KEY}
      - KIWOOM_API_SECRET=${KIWOOM_API_SECRET}
      - KOREA_INVESTMENT_API_KEY=${KOREA_INVESTMENT_API_KEY}
      - KOREA_INVESTMENT_API_SECRET=${KOREA_INVESTMENT_API_SECRET}
      # CORS Configuration
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-https://kset.kro.kr,https://app.kset.dev}
    volumes:
      - kset_logs:/app/logs
      - kset_data:/app/data
      - kset_cache:/app/cache
      - ./config/environments/production.json:/app/config/environments/production.json:ro
    ports:
      - "${KSET_HTTP_PORT:-3000}:3000"
      - "${KSET_WS_PORT:-9000}:9000"
      - "${KSET_METRICS_PORT:-9090}:9090"
    depends_on:
      kset-db:
        condition: service_healthy
      kset-redis:
        condition: service_healthy
    networks:
      - kset-network
    healthcheck:
      test: ["CMD", "/usr/local/bin/health-check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kset.rule=Host(`kset.kro.kr`)"
      - "traefik.http.routers.kset.tls=true"
      - "traefik.http.routers.kset.tls.certresolver=letsencrypt"
      - "traefik.http.services.kset.loadbalancer.server.port=3000"
      - "com.kset.service=app"
      - "com.kset.environment=production"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: kset-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=kset
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - kset-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: kset-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - kset-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: kset-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - kset
    networks:
      - kset-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: kset-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - kset-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: kset-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - kset-network

  # Log Aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: kset-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - kset-network

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: kset-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - kset-network

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: kset-backup
    restart: "no"
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - backup_scripts:/scripts
    depends_on:
      - postgres
    networks:
      - kset-network
    command: >
      sh -c "
        while true; do
          echo 'Starting backup at $(date)'
          pg_dump -h postgres -U postgres kset | gzip > /backups/kset_backup_$(date +%Y%m%d_%H%M%S).sql.gz
          find /backups -name '*.sql.gz' -mtime +7 -delete
          echo 'Backup completed. Sleeping for 24 hours...'
          sleep 86400
        done
      "

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kset_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  backup_scripts:
    driver: local

networks:
  kset-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16