name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # Dependency Security Scan
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate
          npm audit --audit-level=high --json > npm-audit.json || true

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run Snyk to check for code issues
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload Snyk results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk.sarif

  # Container Security Scan
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: production
          load: true
          tags: kset:scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'kset:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: 'kset:scan'
          format: 'sarif'
          output-file: 'grype-results.sarif'

      - name: Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'grype-results.sarif'

  # Code Security Analysis
  code-security:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: typescript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:typescript"

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/typescript
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Run Bandit Security Scan
        uses: securecodewarrior/github-action-add-sarif@v1
        with:
          sarif-file: 'bandit-results.sarif'

  # Secrets Detection
  secrets-detection:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run Detect Secrets
        uses: Yelp/detect-secrets@master
        with:
          baseline: .secrets.baseline

  # Korean Financial Compliance Check
  korean-compliance:
    name: Korean Financial Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for Korean financial compliance
        run: |
          echo "Checking Korean financial regulations compliance..."

          # Check for proper encryption
          if ! grep -r "AES-256-GCM" src/; then
            echo "❌ AES-256-GCM encryption not found"
            exit 1
          fi

          # Check for audit logging
          if ! grep -r "audit.*log" src/; then
            echo "❌ Audit logging not implemented"
            exit 1
          fi

          # Check for data retention policies
          if ! grep -r "2555" src/; then
            echo "❌ 7-year data retention policy not found"
            exit 1
          fi

          # Check for Korean market hours handling
          if ! grep -r "Asia/Seoul\|KST" src/; then
            echo "❌ Korean timezone handling not found"
            exit 1
          fi

          echo "✅ Korean financial compliance checks passed"

      - name: Verify API key management
        run: |
          echo "Checking API key management..."

          # Check for environment variable usage
          if ! grep -r "process\.env\." src/ | grep -q "API_KEY\|SECRET"; then
            echo "❌ API keys not properly managed with environment variables"
            exit 1
          fi

          # Check for key rotation hints
          if ! grep -r "rotation\|expire" src/; then
            echo "⚠️ API key rotation mechanism not found"
          fi

          echo "✅ API key management checks passed"

  # SSL/TLS Configuration Check
  ssl-check:
    name: SSL/TLS Configuration Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Check SSL configuration
        run: |
          echo "Checking SSL/TLS configuration for KSET domains..."

          # Check main domain
          echo "Checking kset.kro.kr..."
          if curl -sSf https://kset.kro.kr/health > /dev/null; then
            echo "✅ kset.kro.kr SSL is valid"
          else
            echo "❌ kset.kro.kr SSL check failed"
          fi

          # Check API domain
          echo "Checking api.kset.dev..."
          if curl -sSf https://api.kset.dev/health > /dev/null; then
            echo "✅ api.kset.dev SSL is valid"
          else
            echo "❌ api.kset.dev SSL check failed"
          fi

          # Check SSL certificate details
          echo | openssl s_client -connect kset.kro.kr:443 -servername kset.kro.kr 2>/dev/null | openssl x509 -noout -dates

  # Generate Security Report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, code-security, secrets-detection, korean-compliance]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-report.md
          echo "" >> security-report.md
          echo "## Scan Results" >> security-report.md
          echo "" >> security-report.md
          echo "- **Dependency Scan**: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- **Container Scan**: ${{ needs.container-scan.result }}" >> security-report.md
          echo "- **Code Security**: ${{ needs.code-security.result }}" >> security-report.md
          echo "- **Secrets Detection**: ${{ needs.secrets-detection.result }}" >> security-report.md
          echo "- **Korean Compliance**: ${{ needs.korean-compliance.result }}" >> security-report.md
          echo "" >> security-report.md
          echo "## Recommendations" >> security-report.md
          echo "" >> security-report.md
          echo "1. Review and fix any high-severity vulnerabilities" >> security-report.md
          echo "2. Ensure all API keys are properly managed" >> security-report.md
          echo "3. Maintain Korean financial compliance" >> security-report.md
          echo "4. Regular security audits and penetration testing" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md

      - name: Comment PR with security results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔒 Security Scan Results\n\n${report}`
            });